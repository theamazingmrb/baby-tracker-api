"""
Django settings for babytracker project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'your-secure-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

# Get network configuration from environment or use defaults
NETWORK_HOST = os.environ.get('NETWORK_HOST', '0.0.0.0')
NETWORK_PORT = os.environ.get('NETWORK_PORT', '8000')

# Build allowed hosts
allowed_hosts = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts.split(',') if host.strip()]
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        '172.20.10.3',
        f'{NETWORK_HOST}:{NETWORK_PORT}'
    ]

# Add production domain if specified
PRODUCTION_DOMAIN = os.environ.get('PRODUCTION_DOMAIN', '')
if PRODUCTION_DOMAIN:
    ALLOWED_HOSTS.append(PRODUCTION_DOMAIN)
    # Also add www subdomain
    if not PRODUCTION_DOMAIN.startswith('www.'):
        ALLOWED_HOSTS.append(f'www.{PRODUCTION_DOMAIN}')

CSRF_TRUSTED_ORIGINS = [f'http://{NETWORK_HOST}:{NETWORK_PORT}']

# Add production domain to CSRF trusted origins if specified
if PRODUCTION_DOMAIN:
    CSRF_TRUSTED_ORIGINS.append(f'https://{PRODUCTION_DOMAIN}')
    CSRF_TRUSTED_ORIGINS.append(f'http://{PRODUCTION_DOMAIN}')
    # Also add www subdomain
    if not PRODUCTION_DOMAIN.startswith('www.'):
        CSRF_TRUSTED_ORIGINS.append(f'https://www.{PRODUCTION_DOMAIN}')
        CSRF_TRUSTED_ORIGINS.append(f'http://www.{PRODUCTION_DOMAIN}')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'corsheaders',
    'tracker',
    'recipes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'babytracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'babytracker' / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'babytracker.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'babytracker_dev',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# For Heroku or Docker
import dj_database_url
if 'DATABASE_URL' in os.environ:
    # Check if we're in production (Heroku) or development (Docker)
    is_production = os.environ.get('ENVIRONMENT', '').lower() == 'production'
    DATABASES['default'] = dj_database_url.config(
        default=os.environ['DATABASE_URL'],
        conn_max_age=600,
        ssl_require=is_production  # Only require SSL in production
    )

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'frontend' / 'out',
    BASE_DIR / 'frontend' / 'out' / '_next',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# WhiteNoise settings for static files
# Use a simpler storage backend to avoid MIME type issues with Next.js files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Configure WhiteNoise to serve Next.js files with correct MIME types
WHITENOISE_MIMETYPES = {
    '.js': 'application/javascript',
    '.css': 'text/css',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject',
    '.otf': 'font/otf',
}

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Baby Tracker API',
    'DESCRIPTION': 'API documentation for Baby Tracker application',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = os.environ.get('CORS_ALLOW_ALL_ORIGINS', str(DEBUG)).lower() == 'true'

# Parse CORS allowed origins from environment variable
cors_origins = os.environ.get('CORS_ALLOWED_ORIGINS', '')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins.split(',') if origin.strip()]

# Add default development origins if none specified
if not CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS = [f'http://{NETWORK_HOST}:{NETWORK_PORT}']
    
# Add frontend domain if specified
FRONTEND_DOMAIN = os.environ.get('FRONTEND_DOMAIN', '')
if FRONTEND_DOMAIN:
    if FRONTEND_DOMAIN.startswith('http'):
        CORS_ALLOWED_ORIGINS.append(FRONTEND_DOMAIN)
    else:
        CORS_ALLOWED_ORIGINS.append(f'https://{FRONTEND_DOMAIN}')
        CORS_ALLOWED_ORIGINS.append(f'http://{FRONTEND_DOMAIN}')
CORS_ALLOW_CREDENTIALS = True

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

SPECTACULAR_SETTINGS = {
    "ENUM_NAME_OVERRIDES": {
        "tracker.models.Feeding.FEEDING_SIDE_CHOICES": [
            ("LEFT", "Left"),
            ("RIGHT", "Right"),
            ("BOTH", "Both"),
            ("NONE", "None")
        ],
        "tracker.models.PumpingSession.PUMPING_SIDE_CHOICES": [
            ("LEFT", "Left"),
            ("RIGHT", "Right"),
            ("BOTH", "Both"),
            ("NONE", "None")
        ]
    }
}
