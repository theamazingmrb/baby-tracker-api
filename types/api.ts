/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/appointments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["appointments_list"];
        put?: never;
        post: operations["appointments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/appointments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["appointments_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/babies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["babies_list"];
        put?: never;
        post: operations["babies_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/babies/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["babies_retrieve"];
        put: operations["babies_update"];
        post?: never;
        delete: operations["babies_destroy"];
        options?: never;
        head?: never;
        patch: operations["babies_partial_update"];
        trace?: never;
    };
    "/api/babies/ai-insights/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["babies_ai_insights_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/babies/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["babies_stats_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/diaper-changes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["diaper_changes_list"];
        put?: never;
        post: operations["diaper_changes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["feedings_list"];
        put?: never;
        post: operations["feedings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/feedings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["feedings_retrieve"];
        put: operations["feedings_update"];
        post?: never;
        delete: operations["feedings_destroy"];
        options?: never;
        head?: never;
        patch: operations["feedings_partial_update"];
        trace?: never;
    };
    "/api/growth-milestones/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["growth_milestones_list"];
        put?: never;
        post: operations["growth_milestones_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/medications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["medications_list"];
        put?: never;
        post: operations["medications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/medications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["medications_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pumping-sessions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["pumping_sessions_list"];
        put?: never;
        post: operations["pumping_sessions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pumping-sessions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["pumping_sessions_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipes/favorites/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["recipes_favorites_list"];
        put?: never;
        post: operations["recipes_favorites_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipes/ingredients/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["recipes_ingredients_list"];
        put?: never;
        post: operations["recipes_ingredients_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipes/recipes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["recipes_recipes_list"];
        put?: never;
        post: operations["recipes_recipes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/recipes/recipes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["recipes_recipes_retrieve"];
        put: operations["recipes_recipes_update"];
        post?: never;
        delete: operations["recipes_recipes_destroy"];
        options?: never;
        head?: never;
        patch: operations["recipes_recipes_partial_update"];
        trace?: never;
    };
    "/api/reminders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["reminders_list"];
        put?: never;
        post: operations["reminders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sleep/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sleep_list"];
        put?: never;
        post: operations["sleep_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Baby: {
            readonly id: number;
            name: string;
            /** Format: date */
            birth_date: string;
            gender: string;
            user: number;
        };
        BabyInsight: {
            feeding_insights: unknown;
            sleep_insights: unknown;
        };
        BabyStats: {
            /** Format: double */
            height: number;
            /** Format: double */
            weight: number;
            age_months: number;
        };
        /** @enum {unknown} */
        BlankEnum: "";
        DiaperChange: {
            readonly id: number;
            /** Format: date-time */
            readonly time: string;
            diaper_type: components["schemas"]["DiaperTypeEnum"];
            baby: number;
        };
        /**
         * @description * `wet` - Wet
         *     * `dirty` - Dirty
         *     * `mixed` - Mixed
         * @enum {string}
         */
        DiaperTypeEnum: "wet" | "dirty" | "mixed";
        DoctorAppointment: {
            readonly id: number;
            doctor_name: string;
            location: string;
            /** Format: date */
            date: string;
            /** Format: time */
            time: string;
            reason?: string | null;
            notes?: string | null;
            baby: number;
        };
        Favorite: {
            readonly id: number;
            /** Format: uuid */
            user_id: string;
            recipe: number;
        };
        Feeding: {
            readonly id: number;
            /** Format: date-time */
            readonly time: string;
            feeding_type: components["schemas"]["FeedingTypeEnum"];
            /**
             * Format: double
             * @description Amount in ounces/ml
             */
            quantity: number;
            last_side?: (components["schemas"]["tracker.models.Feeding.FEEDING_SIDE_CHOICES"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            baby: number;
        };
        /**
         * @description * `breastfeeding` - Breastfeeding
         *     * `bottle` - Bottle
         *     * `solid` - Solid Food
         * @enum {string}
         */
        FeedingTypeEnum: "breastfeeding" | "bottle" | "solid";
        /**
         * @description * `daily` - Daily
         *     * `weekly` - Weekly
         *     * `as_needed` - As Needed
         * @enum {string}
         */
        FrequencyEnum: "daily" | "weekly" | "as_needed";
        GrowthMilestone: {
            readonly id: number;
            /** Format: date */
            date: string;
            /**
             * Format: double
             * @description Height in cm
             */
            height: number;
            /**
             * Format: double
             * @description Weight in kg
             */
            weight: number;
            notes?: string | null;
            baby: number;
        };
        Ingredient: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            name: string;
            /** Format: double */
            quantity: number;
            unit: number;
            recipe: number;
        };
        Medication: {
            readonly id: number;
            name: string;
            dosage: string;
            frequency: components["schemas"]["FrequencyEnum"];
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date?: string | null;
            user: number;
        };
        /** @enum {unknown} */
        NullEnum: null;
        PatchedBaby: {
            readonly id?: number;
            name?: string;
            /** Format: date */
            birth_date?: string;
            gender?: string;
            user?: number;
        };
        PatchedFeeding: {
            readonly id?: number;
            /** Format: date-time */
            readonly time?: string;
            feeding_type?: components["schemas"]["FeedingTypeEnum"];
            /**
             * Format: double
             * @description Amount in ounces/ml
             */
            quantity?: number;
            last_side?: (components["schemas"]["tracker.models.Feeding.FEEDING_SIDE_CHOICES"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            baby?: number;
        };
        PatchedRecipe: {
            readonly id?: number;
            /** Format: date-time */
            readonly created_at?: string;
            name?: string;
            cover_image?: string | null;
            description?: string | null;
            instructions?: string;
            /** Format: uuid */
            created_by?: string;
            /** Format: int64 */
            category?: number;
            is_private?: boolean;
            public_edits?: boolean;
        };
        PumpingSession: {
            readonly id: number;
            /** Format: date-time */
            readonly time: string;
            side: components["schemas"]["tracker.models.PumpingSession.PUMPING_SIDE_CHOICES"];
            /**
             * Format: double
             * @description Milk pumped in ounces/ml
             */
            quantity: number;
            user: number;
        };
        Recipe: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            name: string;
            cover_image?: string | null;
            description?: string | null;
            instructions: string;
            /** Format: uuid */
            created_by: string;
            /** Format: int64 */
            category: number;
            is_private?: boolean;
            public_edits?: boolean;
        };
        Reminder: {
            readonly id: number;
            message: string;
            /** Format: date-time */
            time: string;
            user: number;
            baby: number;
        };
        Sleep: {
            readonly id: number;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time?: string | null;
            baby: number;
        };
        TokenObtainPair: {
            username: string;
            password: string;
            readonly access: string;
            readonly refresh: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        /**
         * @description * `left_feeding` - LEFT
         *     * `right_feeding` - RIGHT
         *     * `both_feeding` - BOTH
         * @enum {string}
         */
        "tracker.models.Feeding.FEEDING_SIDE_CHOICES": "left_feeding" | "right_feeding" | "both_feeding";
        /**
         * @description * `left_pump` - LEFT
         *     * `right_pump` - RIGHT
         *     * `both_pump` - BOTH
         * @enum {string}
         */
        "tracker.models.PumpingSession.PUMPING_SIDE_CHOICES": "left_pump" | "right_pump" | "both_pump";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    appointments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"][];
                };
            };
        };
    };
    appointments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorAppointment"];
                "application/x-www-form-urlencoded": components["schemas"]["DoctorAppointment"];
                "multipart/form-data": components["schemas"]["DoctorAppointment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"];
                };
            };
        };
    };
    appointments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    babies_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baby"][];
                };
            };
        };
    };
    babies_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Baby"];
                "application/x-www-form-urlencoded": components["schemas"]["Baby"];
                "multipart/form-data": components["schemas"]["Baby"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baby"];
                };
            };
        };
    };
    babies_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baby"];
                };
            };
        };
    };
    babies_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Baby"];
                "application/x-www-form-urlencoded": components["schemas"]["Baby"];
                "multipart/form-data": components["schemas"]["Baby"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baby"];
                };
            };
        };
    };
    babies_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    babies_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBaby"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBaby"];
                "multipart/form-data": components["schemas"]["PatchedBaby"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Baby"];
                };
            };
        };
    };
    babies_ai_insights_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BabyInsight"];
                };
            };
        };
    };
    babies_stats_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BabyStats"];
                };
            };
        };
    };
    diaper_changes_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperChange"][];
                };
            };
        };
    };
    diaper_changes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiaperChange"];
                "application/x-www-form-urlencoded": components["schemas"]["DiaperChange"];
                "multipart/form-data": components["schemas"]["DiaperChange"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiaperChange"];
                };
            };
        };
    };
    feedings_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feeding"][];
                };
            };
        };
    };
    feedings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Feeding"];
                "application/x-www-form-urlencoded": components["schemas"]["Feeding"];
                "multipart/form-data": components["schemas"]["Feeding"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feeding"];
                };
            };
        };
    };
    feedings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feeding"];
                };
            };
        };
    };
    feedings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Feeding"];
                "application/x-www-form-urlencoded": components["schemas"]["Feeding"];
                "multipart/form-data": components["schemas"]["Feeding"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feeding"];
                };
            };
        };
    };
    feedings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    feedings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFeeding"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFeeding"];
                "multipart/form-data": components["schemas"]["PatchedFeeding"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feeding"];
                };
            };
        };
    };
    growth_milestones_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrowthMilestone"][];
                };
            };
        };
    };
    growth_milestones_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GrowthMilestone"];
                "application/x-www-form-urlencoded": components["schemas"]["GrowthMilestone"];
                "multipart/form-data": components["schemas"]["GrowthMilestone"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GrowthMilestone"];
                };
            };
        };
    };
    medications_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Medication"][];
                };
            };
        };
    };
    medications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Medication"];
                "application/x-www-form-urlencoded": components["schemas"]["Medication"];
                "multipart/form-data": components["schemas"]["Medication"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Medication"];
                };
            };
        };
    };
    medications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pumping_sessions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PumpingSession"][];
                };
            };
        };
    };
    pumping_sessions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PumpingSession"];
                "application/x-www-form-urlencoded": components["schemas"]["PumpingSession"];
                "multipart/form-data": components["schemas"]["PumpingSession"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PumpingSession"];
                };
            };
        };
    };
    pumping_sessions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    recipes_favorites_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Favorite"][];
                };
            };
        };
    };
    recipes_favorites_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Favorite"];
                "application/x-www-form-urlencoded": components["schemas"]["Favorite"];
                "multipart/form-data": components["schemas"]["Favorite"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Favorite"];
                };
            };
        };
    };
    recipes_ingredients_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ingredient"][];
                };
            };
        };
    };
    recipes_ingredients_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Ingredient"];
                "application/x-www-form-urlencoded": components["schemas"]["Ingredient"];
                "multipart/form-data": components["schemas"]["Ingredient"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ingredient"];
                };
            };
        };
    };
    recipes_recipes_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"][];
                };
            };
        };
    };
    recipes_recipes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recipe"];
                "application/x-www-form-urlencoded": components["schemas"]["Recipe"];
                "multipart/form-data": components["schemas"]["Recipe"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
        };
    };
    recipes_recipes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
        };
    };
    recipes_recipes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Recipe"];
                "application/x-www-form-urlencoded": components["schemas"]["Recipe"];
                "multipart/form-data": components["schemas"]["Recipe"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
        };
    };
    recipes_recipes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    recipes_recipes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRecipe"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRecipe"];
                "multipart/form-data": components["schemas"]["PatchedRecipe"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recipe"];
                };
            };
        };
    };
    reminders_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"][];
                };
            };
        };
    };
    reminders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reminder"];
                "application/x-www-form-urlencoded": components["schemas"]["Reminder"];
                "multipart/form-data": components["schemas"]["Reminder"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    sleep_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sleep"][];
                };
            };
        };
    };
    sleep_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Sleep"];
                "application/x-www-form-urlencoded": components["schemas"]["Sleep"];
                "multipart/form-data": components["schemas"]["Sleep"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Sleep"];
                };
            };
        };
    };
    token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
                "multipart/form-data": components["schemas"]["TokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
}
